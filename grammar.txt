// Tokens
{ } ( ) ; : , == ! != = < > <= >= & && | || + - * ^ / %
identifer: [a-zA-Z][a-zA-Z0-9_]^?
number: [0-9][0-9]^?
ret fn if while for

// Lexemes

<program> := <stmtlist>
<stmtlist> := <stmt>;<stmtlist>|epsilon
<stmt> := <expression> | <for> | <while>

<assign> := identifier = <expressionOrFunc>

<expressionOrFunc> := <expression> | <func>
<expression> := (<expr>) | <assign> | <math> | number | identifier | <funcExec>
<func> := fn ( <arglist> ) { <stmtlist> }
<funcExec> := identifier ( <paramlist> )

<arglist> := identifier , <arglist> | identifier | epsilon
<paramlist> := <expression>, <paramlist> | <expression> | epsilon

<for> := for ( identifier = <expression> : <expression> ) { <stmtlist> }
<while> := while ( <expression> ) { <stmtlist> }

<math> := <sub>
<sub> := <expression> - <add> | <add>
<add> := <expression> + <div> | <div>
<div> := <expression> / <mult> | <mult>
<mult> := <expression> * <pow> | <pow>
<pow> := <expression> ^ <expression> | <expression>
